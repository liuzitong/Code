#ifndef JRPCPLAT_PACKAGE_HXX
#define JRPCPLAT_PACKAGE_HXX

#include "../common/jrpcplat_def.h"
#include <QJsonValue>
#include <QJsonObject>
#include <QString>
#include <QMetaType>
#include <QByteArray>

namespace JRpcPlat {

class DataPkg;

// ////////////////////////////////////////////////////////////////////////////
//
//             binary broadcast package
// since 0.3.4
// ////////////////////////////////////////////////////////////////////////////
class JRPCPLAT_API  BinBcstPkg {
public:
    //! create empty broadcast package
    explicit BinBcstPkg( );

    //! create by another
    BinBcstPkg( const BinBcstPkg & );

    //! create by data
    BinBcstPkg( const QString &method, const QByteArray & );

    //! copy assign
    BinBcstPkg &  operator = ( const BinBcstPkg & );

#if defined( JRPCPLAT_CXX11 )
    BinBcstPkg ( BinBcstPkg && );
    BinBcstPkg &  operator = ( BinBcstPkg && );
#endif

    virtual ~BinBcstPkg();

    //! check it is empty
    bool                isEmpty() const;

    //! time stamp   -- generated by server
    qint64              timeStamp() const;

    //! access method path
    QString             method() const;
    void                setMethod( const QString & );

    //! access the payload data
    QByteArray          data() const;
    void                setData( const QByteArray & );

    //! pack data pkg needed data ( inner used )
    QByteArray          toDataPkgPayloadData( ) const;

    //! from the data package
    static BinBcstPkg    fromDataPkg ( const DataPkg & );
private:
    void *m_obj;
};



// ////////////////////////////////////////////////////////////////////////////
//
// notice package  -- modify: 2019/12/10
//
// ////////////////////////////////////////////////////////////////////////////
class JRPCPLAT_API  NoticePkg {
public:
    //! create empty notice package
    explicit NoticePkg( );

    //! create by another Notice
    NoticePkg( const NoticePkg & );

    //! create by data
    NoticePkg( const QString &method, const QJsonValue &params );

    //! copy assign
    NoticePkg &  operator = ( const NoticePkg & );

#if defined( JRPCPLAT_CXX11 )
    NoticePkg ( NoticePkg && );
    NoticePkg &  operator = ( NoticePkg && );
#endif

    //! dtor
    virtual ~NoticePkg();

    //! check it is empty
    bool                isEmpty() const;

    //! time stamp   -- generated by server
    qint64              timeStamp() const;

    //! access method path
    QString             method() const;
    void                setMethod( const QString & );

    //! access the params
    //! @note if QJsonValue is undefined, means this notice has no parameter(s)
    QJsonValue          params() const;
    void                setParams( const QJsonValue & );

    //! pack data pkg needed data
    QByteArray          toDataPkgPayloadData( ) const;


    //! from the data package
    static NoticePkg    fromDataPkg ( const DataPkg & );
private:
    void *m_obj;
};




// ////////////////////////////////////////////////////////////////////////////
//
// request package
//
// ////////////////////////////////////////////////////////////////////////////
class JRPCPLAT_API  RequestPkg {
public:
    //! create empty request package
    explicit RequestPkg();

    //! create by another request
    RequestPkg( const RequestPkg & );

#if defined( JRPCPLAT_CXX11 )
    RequestPkg ( RequestPkg && );
    RequestPkg &  operator = ( RequestPkg && );
#endif


    //! create by data
    RequestPkg( const QJsonValue &id, const QString &method, const QJsonValue &params );

    //! copy assign
    RequestPkg &  operator = ( const RequestPkg & );

    //! dtor
    virtual ~RequestPkg();

    //! check it is empty
    bool                isEmpty() const;

    //! access the identity
    QJsonValue          id() const;
    void                setId( const QJsonValue& );

    //! multi-purpose UID -- generated by server
    quint64             mpUID() const;

    //! time stamp        -- generated by server
    qint64              timeStamp() const;

    //! access method path
    QString             method() const;
    void                setMethod( const QString & );

    //! access the params
    //! @note if QJsonValue is undefined, means this notice has no parameter(s)
    QJsonValue          params() const;
    void                setParams( const QJsonValue & );

    //! pack data pkg needed data ( binary )
    QByteArray          toDataPkgPayloadData( ) const;

    //! load from  DataPkg, used by inner
    static RequestPkg   fromDataPkg( const DataPkg & );
private:
    void *m_obj;
};




// ////////////////////////////////////////////////////////////////////////////
//
// response package
//
// ////////////////////////////////////////////////////////////////////////////
class JRPCPLAT_API  ResponsePkg {
public: 
    //! create empty package
    explicit ResponsePkg();

    //! create by another reply
    ResponsePkg ( const ResponsePkg & );

    //! create response by data
    ResponsePkg ( const RequestPkg &, const QJsonValue & );

    //! create error by data
    ResponsePkg ( const RequestPkg &, int err_code, const QString &err_msg, const QJsonValue & = QJsonValue( QJsonValue::Undefined ));

    //! assign copy
    ResponsePkg & operator = ( const ResponsePkg & );

    //! dtor
    virtual ~ResponsePkg();

#if defined( JRPCPLAT_CXX11 )
    ResponsePkg ( ResponsePkg && );
    ResponsePkg &  operator = ( ResponsePkg && );
#endif

    //! check if empty
    bool                isEmpty() const;

    //! is result package
    //! @note normally, remote send result data, otherwise, return error data
    bool                isResult() const;

    //! access the id
    QJsonValue          id() const;

    //! multi purpose UID -- generated by server
    quint64             mpUID() const;

    //! time stamp -- the server time stamp..
    qint64              timeStamp() const;

    //! access the error code
    int                 errCode() const;

    //! access the error code
    QString             errMsg() const;

    //! access the data
    //! @note if isResult() is true, return jsonValue is the result{} object, otherwise it is error data
    QJsonValue          data() const;

    //! pack data pkg needed data
    QByteArray          toDataPkgPayloadData( ) const;

    //! load from datapkg
    static ResponsePkg  fromDataPkg( const DataPkg & );

    //! ctor a result
    ResponsePkg ( const QJsonValue &id, const QJsonValue & );

    //! ctor an error
    ResponsePkg ( const QJsonValue &id, int err_code, const QString &err_msg, const QJsonValue & = QJsonValue( QJsonValue::Undefined ));

private:
    void *m_obj;
};

}

Q_DECLARE_METATYPE(JRpcPlat::NoticePkg)
Q_DECLARE_METATYPE(JRpcPlat::RequestPkg)
Q_DECLARE_METATYPE(JRpcPlat::ResponsePkg)

#endif
